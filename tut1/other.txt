#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

//using namespace std;
//using namespace cv;


// helper function to show images
static void show(cv::Mat img) {
    cv::imshow("Image", img);
}

static cv::Mat preprocess(cv::Mat img) {
    cv::Mat imgGray, imgBlur, imgCanny, imgDil, imgThr;
    cv::cvtColor(img, imgGray, cv::COLOR_BGR2HSV);
    cv::Mat imgThreshLow;
    cv::Mat imgThreshHigh;
    cv::inRange(imgGray, cv::Scalar(0,135,135), cv::Scalar(15,255,255), imgThreshLow);
    cv::inRange(imgGray, cv::Scalar(159,135,135), cv::Scalar(179,255,255), imgThreshHigh);
    cv::Mat output;
    cv::addWeighted(imgThreshHigh, 0.5, imgThreshLow, 0.5, 0, output, -1);
    cv::Canny(output, imgCanny, 25, 75);
    cv::Mat kernel = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(3,3));
    cv::dilate(imgCanny, imgDil, kernel);
    return imgDil;
}

void getContours(cv::Mat imgDil, cv::Mat img) {
    std::vector<std::vector<cv::Point>> contours;
    std::vector<cv::Vec4i> hierarchy;

    cv::findContours(imgDil, contours, hierarchy, cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE);
    cv::Mat image(img.rows, img.cols, CV_8UC1, cv::Scalar(0, 0, 0));
    std::vector<std::vector<cv::Point>> conpoly(contours.size());
    for (int i = 0; i < contours.size(); i++) {
        cv::approxPolyDP(contours[i], conpoly[i], 10,true);
        if (conpoly[i].size() == 3 || conpoly[i].size() == 4) {
            cv::drawContours(image, conpoly, i, cv::Scalar(255,255,255), 2);
        }
        
    }
    cv::Mat labels;
    cv::Mat stats;
    cv::Mat centroids;
    int a = connectedComponentsWithStats(image, labels, stats, centroids);
    cv::Point2d p1 = centroids.at<cv::Point2d>(cv::Point(3, 0));
    cv::Point2d p2 = centroids.at<cv::Point2d>(cv::Point(15, 0));
    cv::Point2d p3 = centroids.at<cv::Point2d>(cv::Point(4, 0));
    cv::Point2d p4 = centroids.at<cv::Point2d>(cv::Point(16, 0));
    cv::line(img, centroids.at<cv::Point2d>(cv::Point(3, 0)), centroids.at<cv::Point2d>(cv::Point(15, 0)), cv::Scalar(255,0,0), 5);
    cv::line(img, centroids.at<cv::Point2d>(cv::Point(4, 0)), centroids.at<cv::Point2d>(cv::Point(16, 0)), cv::Scalar(255,0,0), 5);
    
    
    
}

int main(int argc, char** argv) {

    std::string path = argv[1]; // second argument is the path to the image
    cv::Mat img = cv::imread(path); // stores the image in the Mat variable called img
    cv::Mat img2 = cv::imread(path);
    cv::Mat imgDil = preprocess(img);
    getContours(imgDil, img);
    cv::imshow("image", img);
    cv::imshow("original", img2);
    cv::imwrite("images/answer.png", img);
    cv::waitKey(0);
    return 0;
}
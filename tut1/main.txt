#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/core.hpp>
#include <iostream>

//using namespace std;
//using namespace cv;


// helper function to show images
static void show(cv::Mat img) {
    cv::imshow("Image", img);
}

static cv::Mat preprocess(cv::Mat img) {
    cv::Mat imgGray, imgBlur, imgCanny, imgDil, imgThr;

    //cv::cvtColor(img, imgGray, cv::COLOR_BGR2GRAY);
    cv::cvtColor(img, imgGray, cv::COLOR_BGR2HSV);
    cv::Mat imgThreshLow;
    cv::Mat imgThreshHigh;
    cv::inRange(imgGray, cv::Scalar(0,135,135), cv::Scalar(15,255,255), imgThreshLow);
    cv::inRange(imgGray, cv::Scalar(159,135,135), cv::Scalar(179,255,255), imgThreshHigh);
    //cv::imshow("imgHSV",imgGray);
    //cv::imshow("imgThreshLow",imgThreshLow);
    //cv::imshow("imgThreshHigh",imgThreshHigh);
    cv::Mat output;
    cv::addWeighted(imgThreshHigh, 0.5, imgThreshLow, 0.5, 0, output, -1);
    cv::Canny(output, imgCanny, 25, 75);
    cv::Mat kernel = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(3,3));
    cv::dilate(imgCanny, imgDil, kernel);
   //cv::imshow("output", imgDil);
    //cv::waitKey(0);
   // cv::waitKey(0);
    /*cv::GaussianBlur(imgGray, imgBlur, cv::Size(3,3), 3, 0);
    cv::Canny(imgBlur, imgCanny, 25, 75);
    cv::Mat kernel = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(3,3));
    cv::dilate(imgCanny, imgDil, kernel);*/
    return imgDil;
}

void getHull(cv::Mat imgDil) {
    cv::threshold(imgDil, imgDil, 50, 255, cv::THRESH_BINARY);
    std::vector<cv::Point> temp;
    std::vector<std::vector<cv::Point>> pts;
    for (int i = 0; i < imgDil.cols; i++) {
        for (int j = 0; j < imgDil.rows; j++) {
            if (imgDil.at<uchar>(cv::Point(i, j)) == 255) {
                temp.push_back(cv::Point(i, j));
            }
        }
    }
    pts.push_back(temp);
    std::vector<std::vector<cv::Point>> ptsOut(pts.size());
    cv::convexHull(pts[0], ptsOut[0]);
    cv::drawContours(imgDil, ptsOut, -1, cv::Scalar(255), 2);
    cv::imshow("convex hull", imgDil);
    cv::waitKey(0);
}

void slope(cv::Point2d p1, cv::Point2d p2, cv::Mat img) {
    double slope = (p2.y - p1.y)/(p2.x - p1.x);
    
}

void getContours(cv::Mat imgDil, cv::Mat img) {
    std::vector<std::vector<cv::Point>> contours;
    std::vector<cv::Vec4i> hierarchy;

    cv::findContours(imgDil, contours, hierarchy, cv::RETR_LIST, cv::CHAIN_APPROX_SIMPLE);
    cv::Mat image(img.rows, img.cols, CV_8UC1, cv::Scalar(0, 0, 0));
    //cv::imshow("image", image);
    std::vector<std::vector<cv::Point>> conpoly(contours.size());
    for (int i = 0; i < contours.size(); i++) {
        int area = cv::contourArea(contours.at(i));
        cv::approxPolyDP(contours[i], conpoly[i], 10,true);
        //std::cout<<conpoly[i]<<std::endl;
        //cv::drawContours(img, conpoly, i, cv::Scalar(255,0,255), 2);
        
        if (conpoly[i].size() == 3 || conpoly[i].size() == 4) {
            cv::drawContours(image, conpoly, i, cv::Scalar(255,255,255), 2);
        }
        
        //cv::boundingRect(imgDil);
        //std::cout<< area << std::endl;
        //if (area > 500) {
            //cv::drawContours(img, contours, i, cv::Scalar(255,0,255), 2);
        //}
        //float epsilon = cv::arcLength(contours[i], true);
        //cv::approxPolyDP(contours[i], conpoly[i], 0.1*epsilon, true);
        /*if (conpoly[i].size() == 3) {
           std::cout<<conpoly[i]<<std::endl;
           cv::drawContours(img, conpoly, i, cv::Scalar(255,0,255), 2);
        }*/
        
    }
    cv::Mat labels;
    cv::Mat stats;
    cv::Mat centroids;
    int a = connectedComponentsWithStats(image, labels, stats, centroids);
    //std::cout<<centroids<<std::endl;
   /*for (int i = 0; i < centroids.rows; i++) {
        //std::cout<<centroids.row(i).col(0)<<std::endl;
        cv::Point2d p = centroids.at<cv::Point2d>(cv::Point(i, 0));
    }*/
    //std::cout<<centroids.at<cv::Point2d>(cv::Point(4, 0))<<std::endl;
    cv::Point2d p1 = centroids.at<cv::Point2d>(cv::Point(3, 0));
    cv::Point2d p2 = centroids.at<cv::Point2d>(cv::Point(15, 0));
    cv::Point2d p3 = centroids.at<cv::Point2d>(cv::Point(4, 0));
    cv::Point2d p4 = centroids.at<cv::Point2d>(cv::Point(16, 0));
    cv::line(img, centroids.at<cv::Point2d>(cv::Point(3, 0)), centroids.at<cv::Point2d>(cv::Point(15, 0)), cv::Scalar(255,0,0), 5);
    cv::line(img, centroids.at<cv::Point2d>(cv::Point(4, 0)), centroids.at<cv::Point2d>(cv::Point(16, 0)), cv::Scalar(255,0,0), 5);
    
    //cv::Point p1(centroids.row(0).col(0).data, centroids.row(0).col(1));
    //v::line(image, centroids.at<cv::Point2d>(cv::Point(0, 0)), centroids.at<cv::Point2d>(cv::Point(2, 0)), cv::Scalar(150,150,150), 2);
    
    
}



int main(int argc, char** argv) {

    std::string path = argv[1]; // second argument is the path to the image
    cv::Mat img = cv::imread(path); // stores the image in the Mat variable called img
    cv::Mat img2 = cv::imread(path);
    //cv::imshow("Image", img); // shows the image
    //cv::waitKey(0); // ensure the window doesn't close until the terminal stops running
    //cv::Mat newimg = img.clone();
    //cv::line(newimg, cv::Point(20, 20), cv::Point(500,500), cv::Scalar(255,0,255), 4);
    //show(newimg);
    cv::Mat imgDil = preprocess(img);
    
    //cv::imshow("Finished", imgDil);
    //cv::imshow("imgdil", imgDil);
    //getHull(imgDil);
    getContours(imgDil, img);
    cv::imshow("image", img);
    cv::imshow("original", img2);
    cv::imwrite("images/answer.png", img);
    //cv::imshow("dilate", imgDil);
    //cv::imshow("Contours", img);
    //cv::imshow("Dilated", imgDil);
    cv::waitKey(0);
    return 0;
}



